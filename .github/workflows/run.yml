name: Build and Deploy Docker Containers

on:
  push:
    branches:
      - dev  # Déclenche le workflow lorsque des changements sont poussés sur la branche `main`
  pull_request:
    branches:
      - dev  # Déclenche le workflow pour les PRs vers la branche `main`

jobs:
  build:
    runs-on: ubuntu-latest  # Utiliser un environnement Ubuntu pour exécuter le workflow

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Récupère le code du dépôt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Installe Docker Buildx, nécessaire pour des builds multi-architecture

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache  # Caching des layers Docker pour améliorer la vitesse des builds
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build  # Construire les images Docker
          docker-compose -f docker-compose.yml push   # Push des images vers un registre Docker (si applicable)

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ce job dépend du job `build` pour commencer
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Récupère le code du dépôt

      - name: Set up SSH for deployment
        uses: appleboy/ssh-action@v0.1.6  # Utilise SSH pour se connecter au serveur distant
        with:
          host: ${{ secrets.DEPLOY_SERVER_IP }}  # Adresse IP du serveur distant
          username: ${{ secrets.DEPLOY_SERVER_USER }}  # Nom d'utilisateur SSH
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}  # Clé SSH privée pour l'authentification

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_IP }} << 'EOF'
            cd /path/to/your/app  # Accédez au répertoire de l'application sur le serveur
            docker-compose pull  # Récupérer les dernières images
            docker-compose up -d  # Démarrer les conteneurs en mode détaché
          EOF
